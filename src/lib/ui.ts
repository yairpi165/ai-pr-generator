import inquirer from 'inquirer';
import chalk from 'chalk';
import clipboardy from 'clipboardy';
import open from 'open';
import fs from 'fs';
import { prTypes } from './config.js';
import { OUTPUT_CHOICES } from './constants.js';
import { PROptions, OutputChoice } from './types.js';
import { GitHosting } from './git-hosting.js';
import { APP_CONSTANTS } from './constants.js';

/**
 * UI utilities for the CLI
 */
export class UI {
  /**
   * Gets user input through interactive prompts
   */
  static async getInteractiveInput(): Promise<PROptions> {
    const questions = [
      {
        type: 'list',
        name: 'prType',
        message: APP_CONSTANTS.UI.SELECT_PR_TYPE,
        choices: prTypes,
      },
      {
        type: 'input',
        name: 'prTitle',
        message: APP_CONSTANTS.UI.ENTER_PR_TITLE,
        default: '',
      },
      {
        type: 'input',
        name: 'ticket',
        message: APP_CONSTANTS.UI.ENTER_TICKET,
        default: '',
      },
      {
        type: 'input',
        name: 'explanation',
        message: APP_CONSTANTS.UI.ENTER_EXPLANATION,
        default: '',
      },
    ];

    return await inquirer.prompt<PROptions>(questions);
  }

  /**
   * Handles output options for the generated PR description
   */
  static async handleOutputOptions(
    outputPath: string,
    title?: string,
    description?: string
  ): Promise<void> {
    const choices: OutputChoice[] = [...OUTPUT_CHOICES];

    const { action } = await inquirer.prompt<{ action: OutputChoice['value'] }>(
      [
        {
          type: 'list',
          name: 'action',
          message: APP_CONSTANTS.UI.WHAT_TO_DO,
          choices,
        },
      ]
    );

    switch (action) {
      case 'clipboard':
        await clipboardy.write(fs.readFileSync(outputPath, 'utf8'));
        console.log(
          chalk.green(
            `${APP_CONSTANTS.EMOJIS.SUCCESS} ${APP_CONSTANTS.SUCCESS.COPIED_CLIPBOARD}`
          )
        );
        break;
      case 'editor':
        await open(outputPath);
        console.log(
          chalk.green(
            `${APP_CONSTANTS.EMOJIS.SUCCESS} ${APP_CONSTANTS.SUCCESS.OPENED_EDITOR}`
          )
        );
        break;
      case 'bitbucket':
        await GitHosting.openBitbucketPR(title, description);
        break;
      case 'both':
        await clipboardy.write(fs.readFileSync(outputPath, 'utf8'));
        await open(outputPath);
        console.log(
          chalk.green(
            `${APP_CONSTANTS.EMOJIS.SUCCESS} ${APP_CONSTANTS.SUCCESS.COPIED_AND_OPENED}`
          )
        );
        break;
      case 'nothing':
        console.log(
          chalk.yellow(
            `${APP_CONSTANTS.EMOJIS.WARNING} ${APP_CONSTANTS.SUCCESS.SKIPPING}`
          )
        );
        break;
    }

    console.log(chalk.blue(`\n${APP_CONSTANTS.UI.SEE_YOU_NEXT}`));
  }

  /**
   * Displays selected options
   */
  static displayOptions(options: PROptions, providerName: string): void {
    console.log(chalk.green('\nüìã Selected Options:'));
    if (options.prType)
      console.log(chalk.cyan(`   PR Type: ${options.prType}`));
    if (options.prTitle)
      console.log(chalk.cyan(`   PR Title: ${options.prTitle}`));
    if (options.ticket) console.log(chalk.cyan(`   Ticket: ${options.ticket}`));
    if (options.explanation)
      console.log(chalk.cyan(`   Explanation: ${options.explanation}`));
    console.log(chalk.cyan(`   AI Provider: ${providerName}`));
  }

  /**
   * Displays progress messages
   */
  static displayProgress(message: string): void {
    console.log(chalk.yellow(message));
  }

  /**
   * Displays the generated PR description
   */
  static displayResult(
    description: string,
    savedPath: string,
    providerName: string
  ): void {
    console.log(chalk.green('\n--- ‚ú® Generated PR Description ---\n'));
    console.log(description);
    console.log(chalk.green('\n-----------------------------------\n'));
    console.log(chalk.blue(`‚úÖ Saved to: ${savedPath}`));
    console.log(chalk.blue(`ü§ñ Generated by: ${providerName}\n`));
  }

  /**
   * Displays an error message
   */
  static displayError(error: Error): void {
    console.error(chalk.red('‚ùå Error:'), error.message);
  }
}
