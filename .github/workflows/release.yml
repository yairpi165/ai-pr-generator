name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (required if version is custom)'
        required: false
        type: string
      publish_to_npm:
        description: 'Publish to NPM Package'
        required: true
        default: true
        type: boolean

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" = "custom" ]; then
            # Validate custom version format
            custom_version="${{ github.event.inputs.custom_version }}"
            
            # Check if custom_version is provided
            if [ -z "$custom_version" ]; then
              echo "❌ Error: Custom version is required when version type is 'custom'"
              exit 1
            fi
            
            # Validate semantic versioning format (x.y.z with optional pre-release and build metadata)
            if ! echo "$custom_version" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$' > /dev/null; then
              echo "❌ Error: Custom version '$custom_version' does not follow semantic versioning format (x.y.z[-pre-release][+build-metadata])"
              echo "Examples of valid versions: 1.0.0, 2.1.3, 1.0.0-alpha, 1.0.0-beta.1, 1.0.0+20231201"
              exit 1
            fi
            
            # Check for leading zeros in version components
            major=$(echo "$custom_version" | cut -d. -f1)
            minor=$(echo "$custom_version" | cut -d. -f2)
            patch=$(echo "$custom_version" | cut -d. -f3 | cut -d- -f1 | cut -d+ -f1)
            
            if [ "$major" = "0" ] && [ "$minor" = "0" ] && [ "$patch" = "0" ]; then
              echo "❌ Error: Version 0.0.0 is not allowed"
              exit 1
            fi
            
            if [ "$major" -eq 0 ] && [ "$minor" -eq 0 ] && [ "$patch" -eq 0 ]; then
              echo "❌ Error: Version 0.0.0 is not allowed"
              exit 1
            fi
            
            # Check for leading zeros in version components
            if [ "$major" -lt 10 ] && [ ${#major} -gt 1 ] && [ "${major:0:1}" = "0" ]; then
              echo "❌ Error: Major version component cannot have leading zeros"
              exit 1
            fi
            
            if [ "$minor" -lt 10 ] && [ ${#minor} -gt 1 ] && [ "${minor:0:1}" = "0" ]; then
              echo "❌ Error: Minor version component cannot have leading zeros"
              exit 1
            fi
            
            if [ "$patch" -lt 10 ] && [ ${#patch} -gt 1 ] && [ "${patch:0:1}" = "0" ]; then
              echo "❌ Error: Patch version component cannot have leading zeros"
              exit 1
            fi
            
            echo "VERSION=$custom_version" >> $GITHUB_OUTPUT
            echo "✅ Custom version '$custom_version' is valid"
          else
            echo "VERSION=$(npm version ${{ github.event.inputs.version }} --no-git-tag-version --dry-run | sed 's/v//')" >> $GITHUB_OUTPUT
          fi

  release:
    needs: determine-version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Update package.json version
        run: |
          # Update package.json with the new version
          npm version ${{ needs.determine-version.outputs.version }} --no-git-tag-version --allow-same-version

          # Verify the version was updated
          echo "✅ Updated package.json version to ${{ needs.determine-version.outputs.version }}"

      - name: Create Git tag and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Bump version to ${{ needs.determine-version.outputs.version }}"

          # Check if tag already exists
          if git rev-parse "v${{ needs.determine-version.outputs.version }}" >/dev/null 2>&1; then
            echo "⚠️  Tag v${{ needs.determine-version.outputs.version }} already exists, skipping tag creation"
          else
            git tag v${{ needs.determine-version.outputs.version }}
            echo "✅ Created tag v${{ needs.determine-version.outputs.version }}"
          fi

          git push origin main

          # Push tag only if it was created
          if ! git rev-parse "v${{ needs.determine-version.outputs.version }}" >/dev/null 2>&1; then
            git push origin v${{ needs.determine-version.outputs.version }}
            echo "✅ Pushed tag v${{ needs.determine-version.outputs.version }}"
          else
            echo "⚠️  Tag already exists, skipping push"
          fi

      - name: Verify Git tag exists
        run: |
          # Verify that the Git tag exists before creating the release
          if ! git rev-parse "v${{ needs.determine-version.outputs.version }}" >/dev/null 2>&1; then
            echo "❌ Error: Git tag v${{ needs.determine-version.outputs.version }} does not exist!"
            echo "Cannot create release without a valid Git tag."
            exit 1
          fi

          echo "✅ Git tag v${{ needs.determine-version.outputs.version }} exists"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.determine-version.outputs.version }}
          release_name: Release v${{ needs.determine-version.outputs.version }}
          body: |
            ## 🚀 Release v${{ needs.determine-version.outputs.version }}

            ${{ needs.determine-version.outputs.version == '1.0.0' && '🎉 **Initial Release!** This is the first stable version of ai-pr-generator.' || '' }}

            ### ✨ Features
            - AI-powered PR generation
            - Multiple AI providers (GPT and Gemini)
            - Interactive CLI with beautiful UI
            - Automatic PR creation in Bitbucket/GitHub

            ### 📦 Installation
            ```bash
            npm install -g ai-pr-generator
            ```

            ### 🎯 Usage
            ```bash
            genpr init    # Initialize API keys
            genpr         # Interactive mode
            genpr feat "Add feature"  # One-liner mode
            ```

            ### 🔗 Links
            - [GitHub Repository](https://github.com/yairpi165/ai-pr-generator)
            - [npm Package](https://www.npmjs.com/package/ai-pr-generator)
          draft: false
          prerelease: false

  publish-npm:
    needs: [determine-version, release]
    if: ${{ github.event.inputs.publish_to_npm == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we get the latest code including the version update from release job

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify package.json version
        run: |
          # Verify that the package.json has been updated with the correct version
          expected_version="${{ needs.determine-version.outputs.version }}"
          actual_version=$(node -p "require('./package.json').version")

          if [ "$actual_version" != "$expected_version" ]; then
            echo "❌ Error: Package.json version mismatch!"
            echo "Expected: $expected_version"
            echo "Actual: $actual_version"
            echo "This indicates the release job did not properly update package.json"
            exit 1
          fi

          echo "✅ Package.json version verified: $actual_version"

      - name: Verify NPM_TOKEN secret
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ Error: NPM_TOKEN secret is not configured!"
            echo "Please add the NPM_TOKEN secret to your repository secrets."
            echo "You can get your NPM token from: https://www.npmjs.com/settings/tokens"
            exit 1
          fi

          echo "✅ NPM_TOKEN secret is configured"

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
