name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (patch, minor, major) or custom version'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (e.g., 1.0.0) - only used if version is "custom"'
        required: false
        type: string
      publish_to_npm:
        description: 'Publish to NPM Package'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      publish_to_npm: ${{ github.event.inputs.publish_to_npm }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" = "custom" ]; then
            custom_version="${{ github.event.inputs.custom_version }}"
            
            if [ -z "$custom_version" ]; then
              echo "❌ Error: Custom version is required when version type is 'custom'"
              exit 1
            fi
            
            # Validate semantic versioning format (x.y.z)
            if ! echo "$custom_version" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
              echo "❌ Error: Custom version must follow semantic versioning format (x.y.z)"
              exit 1
            fi
            
            # Check for leading zeros
            major=$(echo "$custom_version" | cut -d. -f1)
            minor=$(echo "$custom_version" | cut -d. -f2)
            patch=$(echo "$custom_version" | cut -d. -f3)
            
            if [ "$major" -eq 0 ] && [ "$minor" -eq 0 ] && [ "$patch" -eq 0 ]; then
              echo "❌ Error: Version cannot be 0.0.0"
              exit 1
            fi
            
            if [ "$major" -lt 10 ] && [ ${#major} -gt 1 ] && [ "${major:0:1}" = "0" ]; then
              echo "❌ Error: Major version component cannot have leading zeros"
              exit 1
            fi
            
            if [ "$minor" -lt 10 ] && [ ${#minor} -gt 1 ] && [ "${minor:0:1}" = "0" ]; then
              echo "❌ Error: Minor version component cannot have leading zeros"
              exit 1
            fi
            
            if [ "$patch" -lt 10 ] && [ ${#patch} -gt 1 ] && [ "${patch:0:1}" = "0" ]; then
              echo "❌ Error: Patch version component cannot have leading zeros"
              exit 1
            fi
            
            echo "VERSION=$custom_version" >> $GITHUB_OUTPUT
            echo "✅ Custom version '$custom_version' is valid"
          else
            echo "VERSION=$(npm version ${{ github.event.inputs.version }} --no-git-tag-version --dry-run | sed 's/v//')" >> $GITHUB_OUTPUT
          fi

  create-version-pr:
    needs: determine-version
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create version bump branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create branch name
          branch_name="version-bump/v${{ needs.determine-version.outputs.version }}"

          # Create and checkout new branch
          git checkout -b "$branch_name"

          # Update package.json version
          npm version ${{ needs.determine-version.outputs.version }} --no-git-tag-version --allow-same-version

          # Commit changes
          git add package.json
          git commit -m "Bump version to ${{ needs.determine-version.outputs.version }}"

          # Push branch
          git push origin "$branch_name"

          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: '🚀 Bump version to v${{ needs.determine-version.outputs.version }}'
          body: |
            ## 📦 Version Bump

            This PR updates the version to **v${{ needs.determine-version.outputs.version }}**

            ### 📋 Changes
            - Updated `package.json` version to `${{ needs.determine-version.outputs.version }}`
            - Ready for release and publishing

            ### 🔧 Publish to NPM
            - [ ] Publish to NPM: `${{ needs.determine-version.outputs.publish_to_npm }}`

            ### 📝 Release Notes
            Once merged, this will trigger an automatic release with the following features:

            #### ✨ Features
            - AI-powered PR generation
            - Multiple AI providers (GPT and Gemini)
            - Interactive CLI with beautiful UI
            - Automatic PR creation in Bitbucket/GitHub

            #### 📦 Installation
            ```bash
            npm install -g ai-pr-generator
            ```

            #### 🎯 Usage
            ```bash
            genpr init    # Initialize API keys
            genpr         # Interactive mode
            genpr feat "Add feature"  # One-liner mode
            ```

            #### 🔗 Links
            - [GitHub Repository](https://github.com/yairpi165/ai-pr-generator)
            - [npm Package](https://www.npmjs.com/package/ai-pr-generator)

            ---

            **Note**: This PR was automatically created by the release workflow.
          delete-branch: false
          base: main

      - name: Get PR number
        run: |
          # Get the PR number from the created PR
          pr_number=$(gh pr list --head "${{ env.BRANCH_NAME }}" --json number --jq '.[0].number')
          echo "PR_NUMBER=$pr_number" >> $GITHUB_ENV
          echo "PR_NUMBER=$pr_number" >> $GITHUB_OUTPUT

  wait-for-merge:
    needs: [determine-version, create-version-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Wait for PR merge
        run: |
          echo "⏳ Waiting for PR #${{ needs.create-version-pr.outputs.pr_number }} to be merged..."
          echo "🔗 PR URL: https://github.com/${{ github.repository }}/pull/${{ needs.create-version-pr.outputs.pr_number }}"
          echo ""
          echo "Please review and merge the PR above to continue with the release process."
          echo "This workflow will wait until the PR is merged."

      - name: Check PR status
        run: |
          # Check if PR is merged
          pr_state=$(gh pr view ${{ needs.create-version-pr.outputs.pr_number }} --json state,merged --jq '.state')
          pr_merged=$(gh pr view ${{ needs.create-version-pr.outputs.pr_number }} --json state,merged --jq '.merged')

          if [ "$pr_state" = "CLOSED" ] && [ "$pr_merged" = "true" ]; then
            echo "✅ PR has been merged! Continuing with release..."
          else
            echo "❌ PR has not been merged yet. Please merge the PR to continue."
            exit 1
          fi

  release:
    needs: [determine-version, create-version-pr, wait-for-merge]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if tag already exists
          if git rev-parse "v${{ needs.determine-version.outputs.version }}" >/dev/null 2>&1; then
            echo "⚠️  Tag v${{ needs.determine-version.outputs.version }} already exists, skipping tag creation"
          else
            git tag v${{ needs.determine-version.outputs.version }}
            echo "✅ Created tag v${{ needs.determine-version.outputs.version }}"
          fi

          # Push tag
          git push origin v${{ needs.determine-version.outputs.version }}
          echo "✅ Pushed tag v${{ needs.determine-version.outputs.version }}"

      - name: Verify Git tag exists
        run: |
          # Verify that the Git tag exists before creating the release
          if ! git rev-parse "v${{ needs.determine-version.outputs.version }}" >/dev/null 2>&1; then
            echo "❌ Error: Git tag v${{ needs.determine-version.outputs.version }} does not exist!"
            echo "Cannot create release without a valid Git tag."
            exit 1
          fi

          echo "✅ Git tag v${{ needs.determine-version.outputs.version }} exists"

      - name: Get previous release tag
        id: previous-tag
        run: |
          # Get the previous release tag
          previous_tag=$(git tag --sort=-version:refname | grep -v "v${{ needs.determine-version.outputs.version }}" | head -1)

          if [ -z "$previous_tag" ]; then
            echo "PREVIOUS_TAG=" >> $GITHUB_OUTPUT
            echo "✅ This is the first release (no previous tag found)"
          else
            echo "PREVIOUS_TAG=$previous_tag" >> $GITHUB_OUTPUT
            echo "✅ Previous release tag: $previous_tag"
          fi

      - name: Generate PR list
        id: pr-list
        run: |
          previous_tag="${{ steps.previous-tag.outputs.previous_tag }}"
          current_version="v${{ needs.determine-version.outputs.version }}"

          if [ -z "$previous_tag" ]; then
            # First release - get all PRs since repository creation
            echo "📋 Getting all PRs since repository creation..."
            prs=$(gh pr list --state merged --json number,title,author,mergedAt --limit 100 | jq -r '.[] | "- #\(.number) \(.title) (@\(.author.login))"')
          else
            # Get PRs since the previous release
            echo "📋 Getting PRs since $previous_tag..."
            
            # Get the date of the previous tag
            previous_date=$(git log -1 --format=%cd --date=iso "$previous_tag")
            echo "Previous release date: $previous_date"
            
            # Get PRs merged after the previous release date
            prs=$(gh pr list --state merged --json number,title,author,mergedAt --limit 100 | \
                  jq -r --arg since "$previous_date" '.[] | select(.mergedAt > $since) | "- #\(.number) \(.title) (@\(.author.login))"')
          fi

          if [ -z "$prs" ]; then
            echo "PR_LIST=No merged PRs found since last release" >> $GITHUB_OUTPUT
          else
            echo "PR_LIST<<EOF" >> $GITHUB_OUTPUT
            echo "$prs" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.determine-version.outputs.version }}
          release_name: Release v${{ needs.determine-version.outputs.version }}
          body: |
            ## 🚀 Release v${{ needs.determine-version.outputs.version }}

            ${{ needs.determine-version.outputs.version == '1.0.0' && '🎉 **Initial Release!** This is the first stable version of ai-pr-generator.' || '' }}

            ### 📋 Changes Since Last Release
            ${{ steps.previous-tag.outputs.previous_tag && format('**Since {0}:**', steps.previous-tag.outputs.previous_tag) || '**All changes:**' }}

            ${{ steps.pr-list.outputs.pr_list }}

            ### ✨ Features
            - AI-powered PR generation with multiple providers (GPT and Gemini)
            - Interactive CLI with beautiful UI and emojis
            - Automatic PR creation in Bitbucket/GitHub
            - Smart fallback mechanism between AI providers
            - Comprehensive error handling and user feedback

            ### 📦 Installation
            ```bash
            npm install -g ai-pr-generator
            ```

            ### 🎯 Usage
            ```bash
            genpr init    # Initialize API keys
            genpr         # Interactive mode
            genpr feat "Add feature"  # One-liner mode
            ```

            ### 🔗 Links
            - [GitHub Repository](https://github.com/yairpi165/ai-pr-generator)
            - [npm Package](https://www.npmjs.com/package/ai-pr-generator)
          draft: false
          prerelease: false

  publish:
    needs: [determine-version, release]
    if: ${{ needs.determine-version.outputs.publish_to_npm == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.determine-version.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify package.json version
        run: |
          # Get version from tag name (remove 'v' prefix)
          expected_version="${{ needs.determine-version.outputs.version }}"
          actual_version=$(node -p "require('./package.json').version")

          if [ "$actual_version" != "$expected_version" ]; then
            echo "❌ Error: Package.json version mismatch!"
            echo "Expected: $expected_version"
            echo "Actual: $actual_version"
            echo "This indicates the package.json was not properly updated"
            exit 1
          fi

          echo "✅ Package.json version verified: $actual_version"

      - name: Verify NPM_TOKEN secret
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ Error: NPM_TOKEN secret is not configured!"
            echo "Please add the NPM_TOKEN secret to your repository secrets."
            echo "You can get your NPM token from: https://www.npmjs.com/settings/tokens"
            exit 1
          fi

          echo "✅ NPM_TOKEN secret is configured"

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Success message
        run: |
          echo "🎉 Successfully published ai-pr-generator@$actual_version to NPM!"
          echo "📦 Package: https://www.npmjs.com/package/ai-pr-generator"
